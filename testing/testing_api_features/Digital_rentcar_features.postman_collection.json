{
	"info": {
		"_postman_id": "8cbd43fe-ad1d-47f7-96f0-74b1a3c9cd97",
		"name": "Digital_rentcar_features",
		"description": "Test para la API categorias",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de registro\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de registro\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"\r",
							"//Test del Token\r",
							"pm.test(\"Jwt Obtenido\", function (){\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.status).to.eql(200);\r",
							"    pm.expect(res.message).to.eql(\"Logged\");\r",
							"    pm.collectionVariables.set(\"login_features\", res.user);\r",
							"    pm.collectionVariables.set(\"jwt_features\",res.jwt);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sergiogarcia@gmail.com\",\r\n    \"password\": \"sergiogarcia\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_login}}",
					"host": [
						"{{endpoint_login}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registrar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de registro\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de registro\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"//Test de datos\r",
							"\r",
							"pm.test(\"Los datos del request corresponden\", function (){\r",
							"    const res = pm.response.json();\r",
							"    pm.collectionVariables.set(\"id_feature\",res.id);\r",
							"    pm.collectionVariables.set(\"name_feature\",res.name);\r",
							"    pm.collectionVariables.set(\"value_feature\",res.value);\r",
							"    pm.collectionVariables.set(\"icon_feature\",res.icon);\r",
							"    pm.expect(res.name).to.eql(\"Feature de Testeo\");\r",
							"    pm.expect(res.value).to.eql(\"testeo\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{jwt_features}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwt_features}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Feature de Testeo\",\r\n    \"value\": \"testeo\",\r\n    \"icon\": {\r\n        \"id\": 5\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_save}}",
					"host": [
						"{{endpoint_save}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registrar with image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de registro\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de registro\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"\r",
							"//Test de datos\r",
							"pm.test(\"Los datos del request corresponden\", function (){\r",
							"    const res = pm.response.json();\r",
							"    pm.collectionVariables.set(\"id_feature_img\",res.id);\r",
							"    pm.collectionVariables.set(\"name_feature_img\",res.name);\r",
							"    pm.collectionVariables.set(\"value_feature_img\",res.value);\r",
							"    pm.collectionVariables.set(\"icon_feature_img\",res.icon);\r",
							"    pm.expect(res.name).to.eql(\"Feature de Testeo Con Imagen\");\r",
							"    pm.expect(res.value).to.eql(\"testeo\");\r",
							"    pm.expect(res.icon.title).to.eql(\"Imagen de Testeo de feature\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{jwt_features}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwt_features}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Feature de Testeo Con Imagen\",\r\n    \"value\": \"testeo\",\r\n    \"icon\": {\r\n        \"title\":\"Imagen de Testeo de feature\",\r\n        \"urlImage\": \"https://i.blogs.es/0a15be/skoda-kushaq-2021-07/1366_2000.jpeg\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_save}}",
					"host": [
						"{{endpoint_save}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar todos by Ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de Listar todos\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de Listar todos\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"\r",
							"//Test de listado con ids\r",
							"pm.test(\"Los ids solicitados se encuentran en la lista\", function (){\r",
							"    const data = pm.response.json();\r",
							"    const data_ids = data.map(e=>e.id)\r",
							"    const ids = [11,15,50,25];\r",
							"    for(let i = 0; i < data_ids.length; i++){\r",
							"        const condition = data_ids.includes(ids[i]);\r",
							"        pm.expect(condition).to.eql(true);\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{jwt_features}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{jwt_features}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[11,15,50,25]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_find_by_ids}}",
					"host": [
						"{{endpoint_find_by_ids}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buscar por Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Testeo del status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de Buscar por Id\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"\r",
							"//Test de Respuesta esperada\r",
							"pm.test(\"El id retorna la respuesta correcta\", function (){\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.id).to.eql(pm.collectionVariables.get(\"id_feature_img\"));\r",
							"    pm.expect(data.name).to.eql(pm.collectionVariables.get(\"name_feature_img\"));\r",
							"    pm.expect(data.value).to.eql(pm.collectionVariables.get(\"value_feature_img\"));\r",
							"    pm.expect(data.icon.title).to.eql(pm.collectionVariables.get(\"icon_feature_img\").title);\r",
							"    pm.expect(data.icon.urlImage).to.eql(pm.collectionVariables.get(\"icon_feature_img\").urlImage);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{jwt_features}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{endpoint_find_id}}/{{id_feature_img}}",
					"host": [
						"{{endpoint_find_id}}"
					],
					"path": [
						"{{id_feature_img}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de Listar todos\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de Listar todos\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"\r",
							"//Test de listado de Test1\r",
							"pm.test(\"La Imagen de Testeo se encuentra en la lista\", function (){\r",
							"    const data = pm.response.json();\r",
							"    const id = pm.collectionVariables.get(\"id_feature\");\r",
							"    const name = pm.collectionVariables.get(\"name_feature\");\r",
							"    const value = pm.collectionVariables.get(\"value_feature\");\r",
							"    const icon = pm.collectionVariables.get(\"icon_feature\");\r",
							"    const ele = data.find(ele => ele.id === id);\r",
							"    pm.expect(ele.id).to.eql(id);\r",
							"    pm.expect(ele.name).to.eql(name);\r",
							"    pm.expect(ele.value).to.eql(value);\r",
							"    pm.expect(ele.icon.title).to.eql(icon.title);\r",
							"    pm.expect(ele.icon.urlImage).to.eql(icon.urlImage);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{jwt_features}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{endpoint_find_all}}",
					"host": [
						"{{endpoint_find_all}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de actualizar\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de datos\r",
							"pm.test(\"Los datos del request corresponden\", function (){\r",
							"    const findAll = pm.collectionVariables.get(\"endpoint_find_all\")\r",
							"    pm.sendRequest({findAll, function (err, response) {\r",
							"        const data = response.json();\r",
							"        const id = pm.collectionVariables.get(\"id_feature\");\r",
							"        const ele = data.find(ele => ele.id === id);\r",
							"        pm.expect(ele.name).to.eql(\"Feature de Testo Con Imagen Actualizacion\"); \r",
							"        pm.expect(ele.value).to.eql(\"testeo actualizacion\");\r",
							"        pm.expect(ele.icon.id).to.eql(5);\r",
							"        }\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{jwt_features}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id_feature}},\r\n    \"name\": \"Feature de Testo Con Imagen Actualizacion\",\r\n    \"value\": \"testeo actualizacion\",\r\n    \"icon\": {\r\n        \"id\": 5\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_update}}",
					"host": [
						"{{endpoint_update}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Borrar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de eliminado de id_category\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{jwt_features}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{endpoint_delete_id}}/{{id_feature}}",
					"host": [
						"{{endpoint_delete_id}}"
					],
					"path": [
						"{{id_feature}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar todos by Ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de Listar todos\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de Listar todos\r",
							"pm.test(\"La respuesta contiene un body pero no jsonBody\", function (){\r",
							"    pm.response.to.not.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{jwt_features}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[150,152,153,154]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_delete_by_ids}}",
					"host": [
						"{{endpoint_delete_by_ids}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{jwt_features}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "localhost",
			"value": "http://localhost:8080"
		},
		{
			"key": "endpoint",
			"value": "{{localhost}}/features"
		},
		{
			"key": "endpoint_save",
			"value": "{{endpoint}}/save/new"
		},
		{
			"key": "endpoint_find_by_ids",
			"value": "{{endpoint}}/find/ids"
		},
		{
			"key": "endpoint_delete_by_ids",
			"value": "{{endpoint}}/delete/ids"
		},
		{
			"key": "endpoint_find_all",
			"value": "{{endpoint}}/find/all"
		},
		{
			"key": "endpoint_find_id",
			"value": "{{endpoint}}/find"
		},
		{
			"key": "endpoint_update",
			"value": "{{endpoint}}/update/feature"
		},
		{
			"key": "endpoint_delete_id",
			"value": "{{endpoint}}/delete"
		},
		{
			"key": "endpoint_login",
			"value": "{{localhost}}/auth/login"
		},
		{
			"key": "login_features",
			"value": ""
		},
		{
			"key": "jwt_features",
			"value": ""
		}
	]
}