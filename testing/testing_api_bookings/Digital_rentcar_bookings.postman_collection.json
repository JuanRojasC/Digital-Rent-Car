{
	"info": {
		"_postman_id": "2283f927-ae4a-4652-9435-4e3f1de4d6d8",
		"name": "Digital_rentcar_bookings",
		"description": "Test para la API categorias",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Registrar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de registro\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de registro\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"//Test de datos\r",
							"\r",
							"pm.test(\"Los datos del request corresponden\", function (){\r",
							"    const res = pm.response.json();\r",
							"    pm.collectionVariables.set(\"id_booking\",res.id);\r",
							"    pm.collectionVariables.set(\"time_booking_booking\",res.timeBooking);\r",
							"    pm.collectionVariables.set(\"start_time_booking\",res.startTime);\r",
							"    pm.collectionVariables.set(\"finish_time_booking\",res.finishTime);\r",
							"    pm.collectionVariables.set(\"user_booking\",res.user);\r",
							"    pm.expect(res.timeBooking).to.eql(\"2022-12-20T12:30:00.000+00:00\");\r",
							"    pm.expect(res.startTime).to.eql(\"2022-12-29T08:30:00.000+00:00\");\r",
							"    pm.expect(res.finishTime).to.eql(\"2023-01-05T16:00:00.000+00:00\");\r",
							"    pm.expect(res.user.id).to.eql(1);\r",
							"    pm.expect(res.user.name).to.eql(\"Sergio\");\r",
							"    pm.expect(res.user.email).to.eql(\"sergiogarcia@gmail.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"timeBooking\": \"2022-12-20T12:30\",\r\n    \"startTime\": \"2022-12-29T08:30\",\r\n    \"finishTime\": \"2023-01-05T16:00\",\r\n    \"user\": {\r\n        \"id\": 1\r\n    },\r\n    \"product\": {\r\n        \"id\": 1\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_save}}",
					"host": [
						"{{endpoint_save}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar todos by Ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de Listar todos\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de Listar todos\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"\r",
							"//Test de listado con ids\r",
							"pm.test(\"Los ids solicitados se encuentran en la lista\", function (){\r",
							"    const data = pm.response.json();\r",
							"    const data_ids = data.map(e=>e.id)\r",
							"    const ids = [1,2,3];\r",
							"    pm.expect(JSON.stringify(data_ids)).to.eql(JSON.stringify(ids));\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[1,2,3]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_find_by_ids}}",
					"host": [
						"{{endpoint_find_by_ids}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar todos by Ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de Listar todos\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de Listar todos\r",
							"pm.test(\"La respuesta contiene un body pero no jsonBody\", function (){\r",
							"    pm.response.to.not.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[150,152,153,154]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_delete_by_ids}}",
					"host": [
						"{{endpoint_delete_by_ids}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buscar por Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Testeo del status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de Buscar por Id\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"\r",
							"//Test de Respuesta esperada\r",
							"pm.test(\"El id retorna la respuesta correcta\", function (){\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.id).to.eql(pm.collectionVariables.get(\"id_booking\"));\r",
							"    pm.expect(data.timeBooking).to.eql(pm.collectionVariables.get(\"time_booking_booking\"));\r",
							"    pm.expect(data.startTime).to.eql(pm.collectionVariables.get(\"start_time_booking\"));\r",
							"    pm.expect(data.finishTime).to.eql(pm.collectionVariables.get(\"finish_time_booking\"));\r",
							"    pm.expect(data.user.id).to.eql(pm.collectionVariables.get(\"user_booking\").id);\r",
							"    pm.expect(data.user.name).to.eql(pm.collectionVariables.get(\"user_booking\").name);\r",
							"    pm.expect(data.user.lastName).to.eql(pm.collectionVariables.get(\"user_booking\").lastName);\r",
							"    pm.expect(data.user.email).to.eql(pm.collectionVariables.get(\"user_booking\").email);\r",
							"    pm.expect(data.user.password).to.eql(pm.collectionVariables.get(\"user_booking\").password);\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{endpoint_find_id}}/{{id_booking}}",
					"host": [
						"{{endpoint_find_id}}"
					],
					"path": [
						"{{id_booking}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de Listar todos\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de body de Listar todos\r",
							"pm.test(\"La respuesta contiene un body\", function (){\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.response.to.have.body();\r",
							"})\r",
							"\r",
							"//Test de listado de Test1\r",
							"pm.test(\"La Imagen de Testeo se encuentra en la lista\", function (){\r",
							"    const data = pm.response.json();\r",
							"    const id = pm.collectionVariables.get(\"id_booking\");\r",
							"    const ele = data.find(ele => ele.id === id);\r",
							"    const timeBooking = pm.collectionVariables.get(\"time_booking_booking\");\r",
							"    const startTime = pm.collectionVariables.get(\"start_time_booking\");\r",
							"    const finishTime = pm.collectionVariables.get(\"finish_time_booking\");\r",
							"    const user = pm.collectionVariables.get(\"user_booking\");\r",
							"    pm.expect(ele.id).to.eql(id);\r",
							"    pm.expect(ele.timeBooking).to.eql(timeBooking);\r",
							"    pm.expect(ele.startTime).to.eql(startTime);\r",
							"    pm.expect(ele.finishTime).to.eql(finishTime);\r",
							"    pm.expect(ele.user.name).to.eql(user.name);\r",
							"    pm.expect(ele.user.lastName).to.eql(user.lastName);\r",
							"    pm.expect(ele.user.email).to.eql(user.email);\r",
							"    pm.expect(ele.user.password).to.eql(user.password);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{endpoint_find_all}}",
					"host": [
						"{{endpoint_find_all}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de actualizar\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Test de datos\r",
							"pm.test(\"Los datos del request corresponden\", function (){\r",
							"    const findAll = pm.collectionVariables.get(\"endpoint_find_all\")\r",
							"    pm.sendRequest({findAll, function (err, response) {\r",
							"        const data = response.json();\r",
							"        const id = pm.collectionVariables.get(\"id_booking\");\r",
							"        const ele = data.find(ele => ele.id === id);\r",
							"        pm.expect(ele.startTime).to.eql(\"2022-12-30T08:30:00.000+00:00\"); \r",
							"        pm.expect(ele.user.id).to.eql(2);\r",
							"        }\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id_booking}},\r\n    \"timeBooking\": \"2022-11-20T12:30\",\r\n    \"startTime\": \"2022-12-30T08:30\",\r\n    \"finishTime\": \"2023-01-10T16:00\",\r\n    \"user\": {\r\n        \"id\": 2\r\n    },\r\n    \"product\": {\r\n        \"id\": 3\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint_update}}",
					"host": [
						"{{endpoint_update}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Borrar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test de eliminado de id_category\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{endpoint_delete_id}}/{{id_booking}}",
					"host": [
						"{{endpoint_delete_id}}"
					],
					"path": [
						"{{id_booking}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_endpoint",
			"value": "http://localhost:9000/bookings"
		},
		{
			"key": "endpoint_save",
			"value": "{{base_endpoint}}/save/new"
		},
		{
			"key": "endpoint_find_by_ids",
			"value": "{{base_endpoint}}/find/ids"
		},
		{
			"key": "endpoint_delete_by_ids",
			"value": "{{base_endpoint}}/delete/ids"
		},
		{
			"key": "endpoint_find_all",
			"value": "{{base_endpoint}}/find/all"
		},
		{
			"key": "endpoint_find_id",
			"value": "{{base_endpoint}}/find"
		},
		{
			"key": "endpoint_find_user_id",
			"value": "{{base_endpoint}}/find/user"
		},
		{
			"key": "endpoint_update",
			"value": "{{base_endpoint}}/update/booking"
		},
		{
			"key": "endpoint_delete_id",
			"value": "{{base_endpoint}}/delete"
		},
		{
			"key": "id_booking",
			"value": ""
		},
		{
			"key": "time_booking_booking",
			"value": ""
		},
		{
			"key": "start_time_booking",
			"value": ""
		},
		{
			"key": "finish_time_booking",
			"value": ""
		},
		{
			"key": "user_booking",
			"value": ""
		}
	]
}